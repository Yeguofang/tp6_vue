{"remainingRequest":"/Users/yeguofang/www/tp6_vue_10/node_modules/babel-loader/lib/index.js!/Users/yeguofang/www/tp6_vue_10/src/lib/lvalid.js","dependencies":[{"path":"/Users/yeguofang/www/tp6_vue_10/src/lib/lvalid.js","mtime":1584341267130},{"path":"/Users/yeguofang/www/tp6_vue_10/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yeguofang/www/tp6_vue_10/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport _classCallCheck from \"/Users/yeguofang/www/tp6_vue_10/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yeguofang/www/tp6_vue_10/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar lvalid =\n/*#__PURE__*/\nfunction () {\n  function lvalid() {\n    _classCallCheck(this, lvalid);\n  }\n\n  _createClass(lvalid, null, [{\n    key: \"valid\",\n    value: function valid() {\n      var el = document.getElementsByClassName(\"lvalid\");\n\n      for (var i = 0; i < el.length; i++) {\n        if (el[i].getAttribute(\"required\") === \"required\") {\n          if (this.isNull(el[i].value)) {\n            return el[i].getAttribute(\"info\");\n          }\n        }\n\n        if (el[i].getAttribute(\"valid\") === \"int\") {\n          if (!this.isInt(el[i].value) && !isNull(el[i].value)) {\n            return el[i].getAttribute(\"validInfo\");\n          }\n        }\n\n        if (el[i].getAttribute(\"valid\") === \"number\" && !isNull(el[i].value)) {\n          if (!this.isNumber(el[i].value)) {\n            return el[i].getAttribute(\"validInfo\");\n          }\n        }\n\n        if (el[i].getAttribute(\"valid\") === \"decimal\" && !isNull(el[i].value)) {\n          if (!this.isDecimal(el[i].value)) {\n            return el[i].getAttribute(\"validInfo\");\n          }\n        }\n\n        if (el[i].getAttribute(\"valid\") === \"mobile\" && !isNull(el[i].value)) {\n          if (!this.isMobile(el[i].value)) {\n            return el[i].getAttribute(\"validInfo\");\n          }\n        }\n\n        if (el[i].getAttribute(\"valid\") === \"phone\" && !isNull(el[i].value)) {\n          if (!this.isPhone(el[i].value)) {\n            return el[i].getAttribute(\"validInfo\");\n          }\n        }\n\n        if (el[i].getAttribute(\"valid\") === \"email\" && !isNull(el[i].value)) {\n          if (!this.isEmail(el[i].value)) {\n            return el[i].getAttribute(\"validInfo\");\n          }\n        }\n\n        if (el[i].getAttribute(\"valid\") === \"tel\" && !isNull(el[i].value)) {\n          if (!this.isTel(el[i].value)) {\n            return el[i].getAttribute(\"validInfo\");\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var validResult = this.valid();\n\n      if (validResult === true) {\n        var el = document.getElementsByClassName(\"lvalid\");\n        var data = {};\n\n        for (var i = 0; i < el.length; i++) {\n          data[el[i].getAttribute(\"id\")] = el[i].value;\n        }\n\n        return data;\n      } else {\n        return validResult;\n      }\n    }\n    /*\n    用途：检查输入字符串是否为空或者全部都是空格\n    输入：str\n    返回：\n    如果全是空返回true,否则返回false\n     */\n\n  }, {\n    key: \"isNull\",\n    value: function isNull(str) {\n      if (str === 0) {\n        return false;\n      }\n\n      if (str === \"\" || str === null || str === undefined) {\n        return true;\n      }\n\n      var regu = \"^[ ]+$\";\n      var re = new RegExp(regu);\n      return re.test(str);\n    }\n    /**\n     * 判断用户名格式，包含大小写英文、数字和下划线。同时用户名长度在6-15之间。\n     */\n\n  }, {\n    key: \"isUsername\",\n    value: function isUsername(username) {\n      var first = username.substring(0, 1);\n\n      if (!(first >= 'a' && first <= 'z' || first >= 'A' && first <= 'Z')) {\n        return false;\n      }\n\n      var rename = new RegExp(\"[a-zA-Z_][a-zA-Z_0-9]{0,}\", \"\");\n      return rename.test(username);\n    }\n    /**\n     * 判断密码格式，包含大小写英文、数字和下划线。同时用户名长度在6-16之间。\n     */\n\n  }, {\n    key: \"isPassword\",\n    value: function isPassword(password) {\n      var regex = /^[0-9A-Za-z_]{6,16}$/;\n      return regex.test(password);\n    }\n    /*\n     * 用途：检查输入字符串是否只由汉字、字母 输入： value：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n\n  }, {\n    key: \"isRealName\",\n    value: function isRealName(s) {\n      // 判断是否是汉字、字母\n      var regu = \"^[a-zA-Z\\u4E00-\\u9FA5]+$\";\n      var re = new RegExp(regu);\n      return re.test(s);\n    }\n    /*\n     * 用途：检查输入的Email信箱格式是否正确 输入： strEmail：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n\n  }, {\n    key: \"isEmail\",\n    value: function isEmail(strEmail) {\n      // let  emailReg = /^[_a-z0-9]+@([_a-z0-9]+\\.)+[a-z0-9]{2,3}$/;\n      var emailReg = /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/;\n      return emailReg.test(strEmail);\n    }\n    /*\n     * 用途：检查输入对象的值是否符合整数格式 输入：str 输入的字符串 返回：如果通过验证返回true,否则返回false\n     *\n     */\n\n  }, {\n    key: \"isNumber\",\n    value: function isNumber(str) {\n      var regu = /^[-]{0,1}[0-9]{1,}$/;\n      return regu.test(str);\n    }\n    /*\n     * 用途：检查输入字符串是否符合正整数格式 输入： s：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n\n  }, {\n    key: \"isInt\",\n    value: function isInt(s) {\n      if (s === null || s === undefined) {\n        return false;\n      }\n\n      var regu = \"^[0-9]+$\";\n      var re = new RegExp(regu);\n      return s.search(re) !== -1;\n    }\n    /*\n     * 用途：检查输入字符串是否是带小数的数字格式,可以是负数 输入： s：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n\n  }, {\n    key: \"isDecimal\",\n    value: function isDecimal(str) {\n      if (this.isNumber(str)) return true;\n      var re = /^[-]{0,1}(\\d+)[\\.]+(\\d+)$/;\n\n      if (re.test(str)) {\n        return !(RegExp.$1 === 0 && RegExp.$2 === 0);\n      } else {\n        return false;\n      }\n    }\n    /*\n     * 用途：检查输入手机号码是否正确 输入： s：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n\n  }, {\n    key: \"isMobile\",\n    value: function isMobile(s) {\n      var length = s.length;\n\n      if (length !== 11) {\n        return false;\n      }\n\n      var first = s.charAt(0);\n      return first === 1;\n    }\n  }, {\n    key: \"checkMobile\",\n    value: function checkMobile(s) {\n      var regu = /^[1][3|4|5|7|8][0-9]{9}$/;\n      var re = new RegExp(regu);\n\n      if (re.test(s)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /*\n     * 用途：检查输入的电话号码格式是否正确 输入： strPhone：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n\n  }, {\n    key: \"isPhone\",\n    value: function isPhone(strPhone) {\n      var phoneRegWithArea = /^[0][1-9]{2,3}-[0-9]{5,10}$/;\n      var phoneRegNoArea = /^[1-9]{1}[0-9]{5,8}$/;\n\n      if (strPhone.length > 9) {\n        return phoneRegWithArea.test(strPhone);\n      } else {\n        return phoneRegNoArea.test(strPhone);\n      }\n    }\n    /**\n     * 验证手机号+座机号\n     * @param s\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isTel\",\n    value: function isTel(s) {\n      if (this.isMobile(s)) {\n        return true;\n      }\n\n      return this.isPhone(s);\n    }\n    /**\n     * 获得年月日的日期格式\n     * @param val\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(val) {\n      var date = new Date(val);\n      var seperator1 = \"-\";\n      var year = date.getFullYear();\n      var month = date.getMonth() + 1;\n      var strDate = date.getDate();\n\n      if (month >= 1 && month <= 9) {\n        month = \"0\" + month;\n      }\n\n      if (strDate >= 0 && strDate <= 9) {\n        strDate = \"0\" + strDate;\n      }\n\n      var currentdate = year + seperator1 + month + seperator1 + strDate;\n      return currentdate;\n    }\n    /**\n     * 当前日期增加一年\n     * @param val\n     * @returns {string}\n     */\n\n  }, {\n    key: \"modifyDate\",\n    value: function modifyDate(val) {\n      var date = new Date(val);\n      var seperator1 = \"-\";\n      var year = date.getFullYear() + 1;\n      var month = date.getMonth();\n      var strDate = date.getDate();\n\n      if (month >= 1 && month <= 9) {\n        month = \"0\" + month;\n      }\n\n      if (strDate >= 0 && strDate <= 9) {\n        strDate = \"0\" + strDate;\n      }\n\n      var currentdate = year + seperator1 + month + seperator1 + strDate;\n      return currentdate;\n    }\n  }]);\n\n  return lvalid;\n}();\n\nexport default lvalid;",{"version":3,"sources":["/Users/yeguofang/www/tp6_vue_10/src/lib/lvalid.js"],"names":["lvalid","el","document","getElementsByClassName","i","length","getAttribute","isNull","value","isInt","isNumber","isDecimal","isMobile","isPhone","isEmail","isTel","validResult","valid","data","str","undefined","regu","re","RegExp","test","username","first","substring","rename","password","regex","s","strEmail","emailReg","search","$1","$2","charAt","strPhone","phoneRegWithArea","phoneRegNoArea","val","date","Date","seperator1","year","getFullYear","month","getMonth","strDate","getDate","currentdate"],"mappings":"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","sourcesContent":["class lvalid{\n    static valid() {\n        let  el = document.getElementsByClassName(\"lvalid\");\n        for(let  i = 0; i < el.length; i++){\n            if(el[i].getAttribute(\"required\") === \"required\"){\n                if(this.isNull(el[i].value)){\n                    return el[i].getAttribute(\"info\");\n                }\n            }\n            if(el[i].getAttribute(\"valid\") === \"int\"){\n                if(!this.isInt(el[i].value) && !isNull(el[i].value)){\n                    return el[i].getAttribute(\"validInfo\");\n                }\n            }\n            if(el[i].getAttribute(\"valid\") === \"number\" && !isNull(el[i].value)){\n                if(!this.isNumber(el[i].value)){\n                    return el[i].getAttribute(\"validInfo\");\n                }\n            }\n            if(el[i].getAttribute(\"valid\") === \"decimal\" && !isNull(el[i].value)){\n                if(!this.isDecimal(el[i].value)){\n                    return el[i].getAttribute(\"validInfo\");\n                }\n            }\n            if(el[i].getAttribute(\"valid\") === \"mobile\" && !isNull(el[i].value)){\n                if(!this.isMobile(el[i].value)){\n                    return el[i].getAttribute(\"validInfo\");\n                }\n            }\n            if(el[i].getAttribute(\"valid\") === \"phone\" && !isNull(el[i].value)){\n                if(!this.isPhone(el[i].value)){\n                    return el[i].getAttribute(\"validInfo\");\n                }\n            }\n            if(el[i].getAttribute(\"valid\") === \"email\" && !isNull(el[i].value)){\n                if(!this.isEmail(el[i].value)){\n                    return el[i].getAttribute(\"validInfo\");\n                }\n            }\n            if(el[i].getAttribute(\"valid\") === \"tel\" && !isNull(el[i].value)){\n                if(!this.isTel(el[i].value)){\n                    return el[i].getAttribute(\"validInfo\");\n                }\n            }\n        }\n        return true;\n    }\n    static getValue() {\n        let  validResult = this.valid();\n        if(validResult === true){\n            let  el = document.getElementsByClassName(\"lvalid\");\n            let  data = {};\n            for(let  i = 0; i < el.length; i++){\n                data[el[i].getAttribute(\"id\")] = el[i].value;\n            }\n            return data;\n        }else{\n            return validResult;\n        }\n    }\n\n    /*\n    用途：检查输入字符串是否为空或者全部都是空格\n    输入：str\n    返回：\n    如果全是空返回true,否则返回false\n     */\n    static isNull(str) {\n        if(str === 0){\n            return false;\n        }\n        if (str === \"\" || str === null || str === undefined){\n            return true;\n        }\n        let  regu = \"^[ ]+$\";\n        let  re = new RegExp(regu);\n        return re.test(str);\n    }\n\n    /**\n     * 判断用户名格式，包含大小写英文、数字和下划线。同时用户名长度在6-15之间。\n     */\n    static isUsername(username) {\n        let  first = username.substring(0, 1);\n        if (!((first >= 'a' && first <= 'z') || (first >= 'A' && first <= 'Z'))) {\n            return false;\n        }\n        let  rename = new RegExp(\"[a-zA-Z_][a-zA-Z_0-9]{0,}\", \"\");\n        return rename.test(username);\n    }\n\n    /**\n     * 判断密码格式，包含大小写英文、数字和下划线。同时用户名长度在6-16之间。\n     */\n    static isPassword(password) {\n        let  regex = /^[0-9A-Za-z_]{6,16}$/;\n        return regex.test(password);\n    }\n\n\n    /*\n     * 用途：检查输入字符串是否只由汉字、字母 输入： value：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n    static isRealName(s) {// 判断是否是汉字、字母\n\n        let  regu = \"^[a-zA-Z\\u4e00-\\u9fa5]+$\";\n        let  re = new RegExp(regu);\n        return re.test(s);\n    }\n\n    /*\n     * 用途：检查输入的Email信箱格式是否正确 输入： strEmail：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n    static isEmail(strEmail) {\n        // let  emailReg = /^[_a-z0-9]+@([_a-z0-9]+\\.)+[a-z0-9]{2,3}$/;\n        let  emailReg = /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/;\n        return emailReg.test(strEmail);\n    }\n\n    /*\n     * 用途：检查输入对象的值是否符合整数格式 输入：str 输入的字符串 返回：如果通过验证返回true,否则返回false\n     *\n     */\n    static isNumber(str) {\n        let  regu = /^[-]{0,1}[0-9]{1,}$/;\n        return regu.test(str);\n    }\n\n    /*\n     * 用途：检查输入字符串是否符合正整数格式 输入： s：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n    static isInt(s) {\n        if(s === null || s === undefined){\n            return false;\n        }\n        let  regu = \"^[0-9]+$\";\n        let  re = new RegExp(regu);\n        return s.search(re) !== -1;\n    }\n\n    /*\n     * 用途：检查输入字符串是否是带小数的数字格式,可以是负数 输入： s：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n    static isDecimal(str) {\n        if (this.isNumber(str))\n            return true;\n        let  re = /^[-]{0,1}(\\d+)[\\.]+(\\d+)$/;\n        if (re.test(str)) {\n            return !(RegExp.$1 === 0 && RegExp.$2 === 0);\n\n        } else {\n            return false;\n        }\n    }\n\n    /*\n     * 用途：检查输入手机号码是否正确 输入： s：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n    static isMobile(s) {\n        let  length = s.length;\n        if(length !== 11){\n            return false;\n        }\n        let  first = s.charAt(0);\n        return first === 1;\n\n    }\n\n\n    static checkMobile(s) {\n        var regu = /^[1][3|4|5|7|8][0-9]{9}$/;\n        var re = new RegExp(regu);\n        if (re.test(s)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /*\n     * 用途：检查输入的电话号码格式是否正确 输入： strPhone：字符串 返回： 如果通过验证返回true,否则返回false\n     *\n     */\n    static isPhone(strPhone) {\n        let  phoneRegWithArea = /^[0][1-9]{2,3}-[0-9]{5,10}$/;\n        let  phoneRegNoArea = /^[1-9]{1}[0-9]{5,8}$/;\n        if (strPhone.length > 9) {\n            return phoneRegWithArea.test(strPhone);\n        } else {\n            return phoneRegNoArea.test(strPhone);\n\n        }\n    }\n\n    /**\n     * 验证手机号+座机号\n     * @param s\n     * @returns {boolean}\n     */\n    static isTel(s) {\n        if(this.isMobile(s)){\n            return true;\n        }\n        return this.isPhone(s);\n\n    }\n\n    /**\n     * 获得年月日的日期格式\n     * @param val\n     * @returns {string}\n     */\n    static formatDate (val) {\n        let date = new Date(val);\n        let seperator1 = \"-\";\n        let year = date.getFullYear();\n        let month = date.getMonth() + 1;\n        let strDate = date.getDate();\n        if (month >= 1 && month <= 9) {\n            month = \"0\" + month;\n        }\n        if (strDate >= 0 && strDate <= 9) {\n            strDate = \"0\" + strDate;\n        }\n        let currentdate = year + seperator1 + month + seperator1 + strDate;\n        return currentdate;\n    }\n\n    /**\n     * 当前日期增加一年\n     * @param val\n     * @returns {string}\n     */\n    static modifyDate(val) {\n        let date = new Date(val);\n        let seperator1 = \"-\";\n        let year = date.getFullYear()+1;\n        let month = date.getMonth();\n        let strDate = date.getDate();\n        if (month >= 1 && month <= 9) {\n            month = \"0\" + month;\n        }\n        if (strDate >= 0 && strDate <= 9) {\n            strDate = \"0\" + strDate;\n        }\n        let currentdate = year + seperator1 + month + seperator1 + strDate;\n        return currentdate;\n    }\n\n}\nexport default lvalid;"]}]}