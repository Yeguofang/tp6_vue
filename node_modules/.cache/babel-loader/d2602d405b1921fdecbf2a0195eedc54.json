{"remainingRequest":"/Users/yeguofang/www/tp6_vue_10/node_modules/babel-loader/lib/index.js!/Users/yeguofang/www/tp6_vue_10/src/lib/httpInterceptor.js","dependencies":[{"path":"/Users/yeguofang/www/tp6_vue_10/src/lib/httpInterceptor.js","mtime":1576807796000},{"path":"/Users/yeguofang/www/tp6_vue_10/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yeguofang/www/tp6_vue_10/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\n\n/**\n * axios拦截器\n */\nimport axios from 'axios';\nimport router from \"../router/router\"; // 超时时间\n\naxios.defaults.timeout = 10000; // http request 请求拦截器，有token值则配置上token值\n\naxios.interceptors.request.use(function (config) {\n  var token = localStorage.getItem(\"token\");\n\n  if (token) {\n    // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n    config.headers['Access-Token'] = token;\n  }\n\n  return config;\n}, function (err) {\n  //alert(\"当前发出的网络请求出现了致命的错误\");\n  return Promise.reject(err);\n}); // http response 服务器响应拦截器，这里拦截401错误，并重新跳入登页重新获取token\n\naxios.interceptors.response.use(function (response) {\n  console.log(response);\n  console.log(response.data.status);\n\n  switch (response.data.status) {\n    case -1:\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"username\");\n      router.replace({\n        path: '/'\n      });\n      break;\n\n    default:\n      return response;\n  }\n}, function (error) {\n  console.log(error); //alert( \"服务器的返回值出现错误！请检查\",\"error\");\n  // return Promise.reject(error.response.data)\n});",{"version":3,"sources":["/Users/yeguofang/www/tp6_vue_10/src/lib/httpInterceptor.js"],"names":["axios","router","defaults","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","err","Promise","reject","response","console","log","data","status","removeItem","replace","path","error"],"mappings":";;AAAA;;;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,yB,CACA;;AACAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,KAAzB,C,CACA;;AAEAH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAAAC,MAAM,EAAI;AACN,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAIF,KAAJ,EAAW;AAAG;AACVD,IAAAA,MAAM,CAACI,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AACD,SAAOD,MAAP;AACH,CAPL,EAQI,UAAAK,GAAG,EAAI;AACH;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACH,CAXL,E,CAaA;;AACAZ,KAAK,CAACI,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CACI,UAAAS,QAAQ,EAAI;AACRC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,CAAcC,MAA1B;;AACA,UAAQJ,QAAQ,CAACG,IAAT,CAAcC,MAAtB;AACI,SAAK,CAAC,CAAN;AACIV,MAAAA,YAAY,CAACW,UAAb,CAAwB,OAAxB;AACAX,MAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB;AACAnB,MAAAA,MAAM,CAACoB,OAAP,CAAe;AACXC,QAAAA,IAAI,EAAE;AADK,OAAf;AAGA;;AACJ;AACI,aAAOP,QAAP;AATR;AAWH,CAfL,EAgBI,UAAAQ,KAAK,EAAI;AACLP,EAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ,EADK,CAEL;AACA;AACH,CApBL","sourcesContent":["/**\n * axios拦截器\n */\nimport axios from 'axios'\nimport router from '../router/router'\n// 超时时间\naxios.defaults.timeout = 10000;\n// http request 请求拦截器，有token值则配置上token值\n\naxios.interceptors.request.use(\n    config => {\n        let token = localStorage.getItem(\"token\");\n        if (token) {  // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n            config.headers['Access-Token'] = token;\n        }\n        return config;\n    },\n    err => {\n        //alert(\"当前发出的网络请求出现了致命的错误\");\n        return Promise.reject(err);\n    });\n\n// http response 服务器响应拦截器，这里拦截401错误，并重新跳入登页重新获取token\naxios.interceptors.response.use(\n    response => {\n        console.log(response);\n        console.log(response.data.status);\n        switch (response.data.status) {\n            case -1:\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"username\");\n                router.replace({\n                    path: '/',\n                });\n                break;\n            default:\n                return response;\n        }\n    },\n    error => {\n        console.log(error);\n        //alert( \"服务器的返回值出现错误！请检查\",\"error\");\n        // return Promise.reject(error.response.data)\n    });\n"]}]}